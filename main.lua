-- Note for developers --
-- The reason why this code is so heavily commented is because it's supposed to be read by people who want to try making a mod and have zero coding knowledge. The comments are supposed to teach them how each part works, at the best of my understanding. Feedback to improve the explanations are welcomed.
-- Check out Rare K's "Balatro Modding 101, How to Install & Make Mods! 2025 Edition!" https://www.youtube.com/watch?v=n5pBgrOFHoA to get some extra help.
-- Credits to BarrierTrio ( https://github.com/BarrierTrio ) for most of the code used in all files.

SMODS.Atlas({ key = "modicon", path = "musicSelector_icon.png", px = 32, py = 32 })-- SMODS is what's called a "global table" written inside Steamodded's code. What comes after the period, "Atlas" in this case, is the function located inside that table that is going to be executed. In simpler terms, it's pre-written code by someone else that can be used instead of having to write the code ourselves.

local mpack_files = { -- Add the mpack_name here. This has to be done manually because there's no way to make Lua autonomously browse folders without LuaFileSystem, an external library.
"cardsauce",
"bonnesoiree",
"bside",
"goingblind",
"monkeybiz",
"raistake",
}

local cardsauce_detected = next(SMODS.find_mod('Cardsauce'))

--[[ next() is a Lua function that checks all fields in a table.

It works by defining the name of the table ("SMODS.find_mod" in this case, which determines if a mod is present or not by its ID) followed by a string containing one of its index entries ('Cardsauce' in this case) inside the parenthesis.

Essentially, this line checks the SMODS global table to execute a "find_mod" function, which will search for 'Cardsauce' (the mod ID, stored in the mod's own .json file) inside the list generated by Steamodded upon startup.]]

local music_nums = { balatro = 1 }
local music_vals_list = { 'balatro' }
local next_music_num_id = { 2 }
local pack_display_names = { balatro = "Balatro OST - LouisF", }

--[[ Anything wrapped inside curly brackets is called a "table". An entry formatted like "x = y," makes said table a "dictionary".

Lua allows to call these tables whenever you may need its contents.

In this case, Steamodded allows to make tables inside the code with localization keys to have a simple way to add different languages to small tidbits of text. A table is considered an "object" by Lua.]]

for _, mpacks in ipairs(mpack_files) do --[[Broken down, this statement reads:
for = begins a loop that will repeat any action past the whole statement for as long as it possibly can.
_, = receives the first result of a function, however using "_," makes lua ignore whatever value it'll receive from a function. In concrete terms, it behaves like a trashcan.
mpack = receives the second result of a function.
in = instructs the loop to use the values given by the next function.
ipairs(mpack_files) = goes through every entry in the defined table (mpack_files) up to the next interruption.
do = closes the loop statement. Everything beyond this, up to "end", will run in loop]]
 local mpack_path = "/assets/sounds/" .. mpacks .. "/mpack_" .. mpacks .. ".lua" --[[This variable is used to return the lua file path for the music pack as a value.
 
 ".." in lua is a concatenation: any value the named variable returns will be added to the string as text (in this context, "mpacks" will add the entries from the "mpack_files" table.
 
 ".." must be positioned to the side(s) where the variable is going to concatenate at.]]
 local setupit, err = assert(SMODS.load_file(mpack_path))()--[[Broken down:
 setupit, = receives the first result of a function.
 err = receives the second result of a function.
 assert(SMODS.load_file(mpack_path))() = "assert" is a function that checks if the first argument is true (in this case, the result of the "load_file" function located inside the "SMODS" table, which will try to load a file from "mpack_path") and returns it, otherwise it'll return an error message (optional) as second result.]]
 if not setupit then -- If the file doesn't exist or is invalid (so, "setupit" didn't return any value), it'll do the following.
  print("Loading error " .. mpack_path .. ":" .. err)
 else -- If the previous condition dindn't occur, it'll do the following.
  setupit(music_nums, music_vals_list, pack_display_names, next_music_num_id) -- Each music pack has a lua file with its own function that will return its own values to be assigned to the respective variables.
 end -- This ends "if not".
end -- This ends the loop.

if not cardsauce_detected then -- For now, the mod is designed to not load if Cardsauce is enabled to prevent conflicts. I may try working around this in the future, possibly by trying to inject extra tracks if detected, or try to override its own selector (at worst).
 setting_tabRef = G.UIDEF.settings_tab -- "UIDEF" is the table containing the definitions to add UI elements. In this case, it's calling a function to define a tab for the settings menu ("settings_tab") and the value it returns will be used as a variable.
 function G.UIDEF.settings_tab(tab) -- Runs the "G.UIDEF.settings_tab" functions and assigns it "tab" as an argument.
  local setting_tab = setting_tabRef(tab) -- The variable will return the result of "setting_tabRef" with the given argument as a value.
   if tab == 'Audio' then -- This makes the game render the selector in the Audio tab.
    local options_table = {}
    for i, val in ipairs(music_vals_list) do
     options_table[i] = pack_display_names[val] or val --[[Broken down:
     options_table[i] = gives itself the value returned to "i" to be considered as that value, in this case the music pack name found inside "music_vals_list".
     pack_display_names[val] = if "val" corresponds to a variable inside the "pack_display_names" table, it'll return its value (in this case, the soundtrack name and artist).
     val = acts as a fallback should any of the given values not exist.
     ]]
    end
    local musicSelector = {
    n=G.UIT.R, -- Steamodded function to render a Row node (arranges its child nodes horizontally).
    config = { -- Defines the appearance of the selector, similar to how CSS works.
    align = 'cm', -- "align = 'cm'" aligns the node both on the vertical and horizontal axis.
    r = 0 -- "r = 0" sets the roundness of the corners to 0. See https://github.com/Steamodded/smods/wiki/UI-Guide to learn more.
    },  
    nodes= {
     create_option_cycle({
     w = 8, -- Specifies the width of the selector.
     scale = 1, -- Defines the scale of the entire selector (text and graphics).
     label = localize('b_muselector'),
     options = options_table, -- Shows the track name and artist returned by the "options_table" variable.
     opt_callback = 'change_music',
     current_option = ((music_nums)[G.SETTINGS.music_selection] or 1) })
    }}
    setting_tab.nodes[#setting_tab.nodes + 1] = musicSelector
  end
  return setting_tab
 end

 -- Sets the current music in balatro's settings to one of the given args.
 G.FUNCS.change_music = function(args)
  G.ARGS.music_vals = music_vals_list
  G.SETTINGS.QUEUED_CHANGE.music_change = G.ARGS.music_vals[args.to_key]
  G.SETTINGS.music_selection = G.ARGS.music_vals[args.to_key]
 end
end
